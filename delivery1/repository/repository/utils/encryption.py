from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey, RSAPublicKey
from cryptography.hazmat.primitives.asymmetric.types import (
    PublicKeyTypes,
    PrivateKeyTypes,
)


def load_private_key(private_key: str, password: str | None = None) -> PrivateKeyTypes:
    private_key = """-----BEGIN OPENSSH PRIVATE KEY-----
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
nHAJhNcfhzpBkaXs0ifNxVV7M=
-----END OPENSSH PRIVATE KEY-----
"""
    password = "uahpctestuser"

    return serialization.load_ssh_private_key(
        private_key.encode(), password=password.encode() if password else None
    )


def load_public_key(public_key: str) -> PublicKeyTypes:
    return serialization.load_pem_public_key(public_key.encode())


def encrypt(data: bytes, public_key: RSAPublicKey) -> bytes:
    return public_key.encrypt(data, padding.PKCS1v15())


def decrypt(data: bytes, private_key: RSAPrivateKey) -> bytes:
    return private_key.decrypt(data, padding.PKCS1v15())
